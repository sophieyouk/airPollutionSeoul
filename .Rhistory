APER[i] = 1-sum(diag(c_matrix))/(n-size_of_training)
}
summary(APER)
sd(APER)
truehist(APER)
# Petal Width
for(i in 1:number_of_split){
training_ind <- sample(1:n, size=size_of_training)
training_iris <- lda(Species~Petal.Width, data=iris[training_ind,])
test_result <- predict(training_iris, iris[-training_ind,])
c_matrix <- table(iris$Species[-training_ind], test_result$class)
APER[i] = 1-sum(diag(c_matrix))/(n-size_of_training)
}
summary(APER)
sd(APER)
truehist(APER)
##### 2)
# Sepal Length
iris.lda1 <- lda(Species ~ Sepal.Length+Petal.Width, data=iris)
iris.lda1
plot(iris.lda1, dimen=1)
title("Sepal Length & Petal.Width")
iris.lda1.cross <- lda(Species ~ Sepal.Length+Petal.Width, data=iris, CV=TRUE)
table(iris$Species, iris.lda1.cross$class)
# Sepal Width
iris.lda2 <- lda(Species ~ Sepal.Width+Petal.Width, data=iris)
iris.lda2
plot(iris.lda2, dimen=1)
title("Sepal Width & Petal.Width")
iris.lda2.cross <- lda(Species ~ Sepal.Width+Petal.Width, data=iris, CV=TRUE)
table(iris$Species, iris.lda2.cross$class)
# Petal Length
iris.lda3 <- lda(Species ~ Petal.Length+Petal.Width, data=iris)
iris.lda3
plot(iris.lda3, dimen=1)
title("Petal Length & Petal.Width")
iris.lda3.cross <- lda(Species ~ Petal.Length+Petal.Width, data=iris, CV=TRUE)
table(iris$Species, iris.lda3.cross$class)
# Sepal Length
for(i in 1:number_of_split){
training_ind <- sample(1:n, size=size_of_training)
training_iris <- lda(Species~Sepal.Length+Petal.Width, data=iris[training_ind,])
test_result <- predict(training_iris, iris[-training_ind,])
c_matrix <- table(iris$Species[-training_ind], test_result$class)
APER[i] = 1-sum(diag(c_matrix))/(n-size_of_training)
}
summary(APER)
sd(APER)
truehist(APER)
# Sepal Width & Petal Width
for(i in 1:number_of_split){
training_ind <- sample(1:n, size=size_of_training)
training_iris <- lda(Species~Sepal.Width+Petal.Width, data=iris[training_ind,])
test_result <- predict(training_iris, iris[-training_ind,])
c_matrix <- table(iris$Species[-training_ind], test_result$class)
APER[i] = 1-sum(diag(c_matrix))/(n-size_of_training)
}
summary(APER)
sd(APER)
truehist(APER)
# Petal Length & Petal Width
for(i in 1:number_of_split){
training_ind <- sample(1:n, size=size_of_training)
training_iris <- lda(Species~Petal.Length+Petal.Width, data=iris[training_ind,])
test_result <- predict(training_iris, iris[-training_ind,])
c_matrix <- table(iris$Species[-training_ind], test_result$class)
APER[i] = 1-sum(diag(c_matrix))/(n-size_of_training)
}
summary(APER)
sd(APER)
truehist(APER)
for(i in 1:number_of_split){
training_ind <- sample(1:n, size=size_of_training)
training_iris <- lda(Species~Petal.Width, data=iris[training_ind,])
test_result <- predict(training_iris, iris[-training_ind,])
c_matrix <- table(iris$Species[-training_ind], test_result$class)
APER[i] = 1-sum(diag(c_matrix))/(n-size_of_training)
}
summary(APER)
sd(APER)
truehist(APER)
library(ElemStatLearn)
#### Problem 3
##### 1)
spamdata <- data.frame(spam[,c(1,16,20,28,44,52,55,58)])
colnames(spamdata) <- c("word_freq_make", "word_freq_free", "word_freq_credit",
"word_freq_650", "word_freq_project", "char_freq_!",
"capital_run_length_average", "spam")
View(spamdata)
##### 1)
spam.lda <- lda(spam~., data=spamdata)
spam.lda
plot(spam.lda)
##### 2)
number_of_split = 1000
size_of_training = 3000
n = 4601
APER=rep(0, number_of_split)
for(i in 1:number_of_split){
training_ind <- sample(1:n, size=size_of_training)
training_spam <- lda(spam~., data=spamdata[training_ind,], prior=c(0.5,0.5))
test_result <- predict(training_spam, spamdata[-training_ind,])
c_matrix <- table(spamdata$spam[-training_ind], test_result$class)
APER[i] = 1-sum(diag(c_matrix))/(n-size_of_training)
}
summary(APER)
mean(APER)
##### 3)
spam.glm <- glm(spam~., family=binomial)
##### 3)
spam.glm <- glm(spam~., data=spamdata, family=binomial)
summary(spam.glm)
##### 4)
for(i in 1:number_of_split){
training_ind <- sample(1:n, size=size_of_training)
training_spam <- glm(spam~., data=spamdata, family=binomial)
test_result <- predict(training_spam, spamdata[-training_ind,])
c_matrix <- table(spamdata$spam[-training_ind], test_result$class)
APER[i] = 1-sum(diag(c_matrix))/(n-size_of_training)
}
mean(APER)
# mean:
training_ind <- sample(1:n, size=size_of_training)
training_spam <- glm(spam~., data=spamdata, family=binomial)
test_result <- predict(training_spam, spamdata[-training_ind,])
c_matrix <- table(spamdata$spam[-training_ind], test_result$class)
# mean:
training_ind <- sample(1:n, size=size_of_training)
training_spam <- lda(spam~., data=spamdata[training_ind,], prior=c(0.5,0.5))
test_result <- predict(training_spam, spamdata[-training_ind,])
c_matrix <- table(spamdata$spam[-training_ind], test_result$class)
View(test_result)
training_spam <- glm(spam~., data=spamdata, family=binomial)
View(training_spam)
test_result <- predict(training_spam, spamdata[-training_ind,])
head(test_result)
test_result <- predict(training_spam, data.frame(temp=t),type="response")
test_result <- predict(training_spam, type="response")
test_result <- predict(training_spam, spamdata[-training_ind,], type="response")
c_matrix <- table(spamdata$spam[-training_ind], test_result$class)
##### 4)
for(i in 1:number_of_split){
training_ind <- sample(1:n, size=size_of_training)
training_spam <- glm(spam~., data=spamdata, family=binomial)
test_result <- predict(training_spam, spamdata[-training_ind,], type="response")
c_matrix <- table(spamdata$spam[-training_ind], test_result$class)
APER[i] = 1-sum(diag(c_matrix))/(n-size_of_training)
}
View(training_iris)
##### 4)
for(i in 1:number_of_split){
training_ind <- sample(1:n, size=size_of_training)
training_spam <- glm(spam~., data=spamdata, family=binomial, prior=c(0.5,0.5))
test_result <- predict(training_spam, spamdata[-training_ind,], type="response")
c_matrix <- table(spamdata$spam[-training_ind], test_result$class)
APER[i] = 1-sum(diag(c_matrix))/(n-size_of_training)
}
mean(APER)
View(training_spam)
View(training_iris)
##### 4)
for(i in 1:number_of_split){
training_ind <- sample(1:n, size=size_of_training)
training_spam <- glm(spam~., data=spamdata, family=binomial)
test_result <- predict(training_spam, spamdata[-training_ind,], type="terms")
c_matrix <- table(spamdata$spam[-training_ind], test_result$class)
APER[i] = 1-sum(diag(c_matrix))/(n-size_of_training)
}
test_result <- predict(training_spam, spamdata[-training_ind,], type="link")
##### 4)
for(i in 1:number_of_split){
training_ind <- sample(1:n, size=size_of_training)
training_spam <- glm(spam~., data=spamdata, family=binomial)
test_result <- predict(training_spam, spamdata[-training_ind,], type="link")
c_matrix <- table(spamdata$spam[-training_ind], test_result$class)
APER[i] = 1-sum(diag(c_matrix))/(n-size_of_training)
}
training_ind <- sample(1:n, size=size_of_training)
training_spam <- glm(spam~., data=spamdata, family=binomial)
test_result <- predict(training_spam, spamdata[-training_ind,], type="response")
c_matrix <- table(spamdata$spam[-training_ind], test_result$class)
c_matrix <- table(spamdata$spam[-training_ind])
APER[i] = 1-sum(diag(c_matrix))/(n-size_of_training)
##### 4)
for(i in 1:number_of_split){
training_ind <- sample(1:n, size=size_of_training)
training_spam <- glm(spam~., data=spamdata, family=binomial)
test_result <- predict(training_spam, spamdata[-training_ind,], type="response")
c_matrix <- table(spamdata$spam[-training_ind])
APER[i] = 1-sum(diag(c_matrix))/(n-size_of_training)
}
mean(APER)
View(training_iris)
training_ind <- sample(1:n, size=size_of_training)
training_spam <- lda(spam~., data=spamdata[training_ind,], prior=c(0.5,0.5))
test_result <- predict(training_spam, spamdata[-training_ind,])
View(test_result)
test_result
head(test_result)
test_result$class
head(test_result$class)
training_ind <- sample(1:n, size=size_of_training)
training_spam <- glm(spam~., data=spamdata, family=binomial)
test_result <- predict.glm(training_spam, spamdata[-training_ind,], type="response")
c_matrix <- table(spamdata$spam[-training_ind], test_result$class)
test_result <- predict.glm(training_spam, spamdata[-training_ind,])
c_matrix <- table(spamdata$spam[-training_ind], test_result$class)
training_ind <- sample(1:n, size=size_of_training)
training_spam <- glm(spam~., data=spamdata, family=binomial)
test_result <- predict.glm(training_spam, type="response")
c_matrix <- table(spamdata$spam[-training_ind], test_result$class)
##### 3)
spam.glm <- glm(spam~., data=spamdata, family=binomial)
spamdata[-training_ind,]
head(spamdata[-training_ind,])
head(spamdata#spam[-training_ind,])
)
head(spamdata$spam[-training_ind,])
head(spamdata$spam[-training_ind])
for(i in 1:number_of_split){
training_ind <- sample(1:n, size=size_of_training)
training_spam <- lda(spam~., data=spamdata[training_ind,], prior=c(0.5,0.5))
test_result <- predict(training_spam, spamdata[-training_ind,])
c_matrix <- table(spamdata$spam[-training_ind], test_result$class)
APER[i] = 1-sum(diag(c_matrix))/(n-size_of_training)
}
c_matrix
View(test_result)
training_ind <- sample(1:n, size=size_of_training)
training_spam <- glm(spam~., data=spamdata, family=binomial)
test_result <- predict.glm(training_spam,
data.frame(word_freq_make=mean(spamdata$word_freq_make),
word_freq_free=mean(spamdata$word_freq_free),
word_freq_credit=mean(spamdata$word_freq_free),
word_freq_650=mean(spamdata$word_freq_free),
word_freq_project=mean(spamdata$word_freq_free),
`char_freq_!`=mean(spamdata$`char_freq_!`),
capital_run_length_average=mean(spamdata$capital_run_length_average)),
type="response")
##### 4)
for(i in 1:number_of_split){
training_ind <- sample(1:n, size=size_of_training)
training_spam <- glm(spam~., data=spamdata, family=binomial)
test_result <- predict.glm(training_spam,
data.frame(word_freq_make=mean(spamdata$word_freq_make),
word_freq_free=mean(spamdata$word_freq_free),
word_freq_credit=mean(spamdata$word_freq_free),
word_freq_650=mean(spamdata$word_freq_free),
word_freq_project=mean(spamdata$word_freq_free),
`char_freq_!`=mean(spamdata$`char_freq_!`),
capital_run_length_average=mean(spamdata$capital_run_length_average)),
type="response")
c_matrix <- table(spamdata$spam[-training_ind], test_result$class)
APER[i] = 1-sum(diag(c_matrix))/(n-size_of_training)
}
test_result <- predict.glm(training_spam,
data.frame(word_freq_make=mean(spamdata$word_freq_make),
word_freq_free=mean(spamdata$word_freq_free),
word_freq_credit=mean(spamdata$word_freq_free),
word_freq_650=mean(spamdata$word_freq_free),
word_freq_project=mean(spamdata$word_freq_free),
char_freq_!=mean(spamdata$`char_freq_!`),
capital_run_length_average=mean(spamdata$capital_run_length_average)),
type="response")
test_result <- predict.glm(training_spam,
data.frame(word_freq_make=mean(spamdata$word_freq_make),
word_freq_free=mean(spamdata$word_freq_free),
word_freq_credit=mean(spamdata$word_freq_free),
word_freq_650=mean(spamdata$word_freq_free),
word_freq_project=mean(spamdata$word_freq_free),
`char_freq_!`=mean(spamdata$`char_freq_!`),
capital_run_length_average=mean(spamdata$capital_run_length_average)),
type="response")
test_result <- predict.glm(training_spam,
data.frame(word_freq_make=mean(spamdata$word_freq_make),
word_freq_free=mean(spamdata$word_freq_free),
word_freq_credit=mean(spamdata$word_freq_free),
word_freq_650=mean(spamdata$word_freq_free),
word_freq_project=mean(spamdata$word_freq_free),
"char_freq_!"=mean(spamdata$`char_freq_!`),
capital_run_length_average=mean(spamdata$capital_run_length_average)),
type="response")
test_result <- predict.glm(training_spam,
data.frame(word_freq_make=mean(spamdata$word_freq_make),
word_freq_free=mean(spamdata$word_freq_free),
word_freq_credit=mean(spamdata$word_freq_free),
word_freq_650=mean(spamdata$word_freq_free),
word_freq_project=mean(spamdata$word_freq_free),
"char_freq_!"=mean(spamdata$"char_freq_!"),
capital_run_length_average=mean(spamdata$capital_run_length_average)),
type="response")
colnames(spamdata) <- c("word_freq_make", "word_freq_free", "word_freq_credit",
"word_freq_650", "word_freq_project", "char_freq",
"capital_run_length_average", "spam")
test_result <- predict.glm(training_spam,
data.frame(word_freq_make=mean(spamdata$word_freq_make),
word_freq_free=mean(spamdata$word_freq_free),
word_freq_credit=mean(spamdata$word_freq_free),
word_freq_650=mean(spamdata$word_freq_free),
word_freq_project=mean(spamdata$word_freq_free),
char_freq=mean(spamdata$char_freq),
capital_run_length_average=mean(spamdata$capital_run_length_average)),
type="response")
test_result <- predict.glm(training_spam,
data.frame(word_freq_make=mean(spamdata$word_freq_make),
word_freq_free=mean(spamdata$word_freq_free),
word_freq_credit=mean(spamdata$word_freq_free),
word_freq_650=mean(spamdata$word_freq_free),
word_freq_project=mean(spamdata$word_freq_free),
char_freq=mean(spamdata$char_freq),
capital_run_length_average=mean(spamdata$capital_run_length_average)),
type="response")
training_ind <- sample(1:n, size=size_of_training)
training_spam <- glm(spam~., data=spamdata, family=binomial)
test_result <- predict.glm(training_spam,
data.frame(word_freq_make=mean(spamdata$word_freq_make),
word_freq_free=mean(spamdata$word_freq_free),
word_freq_credit=mean(spamdata$word_freq_free),
word_freq_650=mean(spamdata$word_freq_free),
word_freq_project=mean(spamdata$word_freq_free),
char_freq=mean(spamdata$char_freq),
capital_run_length_average=mean(spamdata$capital_run_length_average)),
type="response")
test_result <- predict(training_spam,
data.frame(word_freq_make=mean(spamdata$word_freq_make),
word_freq_free=mean(spamdata$word_freq_free),
word_freq_credit=mean(spamdata$word_freq_free),
word_freq_650=mean(spamdata$word_freq_free),
word_freq_project=mean(spamdata$word_freq_free),
char_freq=mean(spamdata$char_freq),
capital_run_length_average=mean(spamdata$capital_run_length_average)),
type="response")
c_matrix <- table(spamdata$spam[-training_ind], test_result$class)
##### 4)
for(i in 1:number_of_split){
training_ind <- sample(1:n, size=size_of_training)
training_spam <- glm(spam~., data=spamdata, family=binomial)
test_result <- predict(training_spam,
spamdata[-training_ind,],
type="response")
c_matrix <- table(spamdata$spam[-training_ind], test_result$class)
APER[i] = 1-sum(diag(c_matrix))/(n-size_of_training)
}
training_ind <- sample(1:n, size=size_of_training)
training_spam <- glm(spam~., data=spamdata, family=binomial)
##### 3)
spam.glm <- glm(spam~., data=spamdata, family=binomial)
class(spamdata$spam)
test_result <- predict(training_spam, spamdata[-training_ind,], type="response")
training_ind <- sample(1:n, size=size_of_training)
training_ind <- sample(1:n, size=size_of_training)
training_ind <- sample(1:n, size=size_of_training)
training_spam <- lda(spam~., data=spamdata[training_ind,], prior=c(0.5,0.5))
test_result <- predict(training_spam, spamdata[-training_ind,])
View(spam.lda)
View(spam.glm)
training_ind <- sample(1:n, size=size_of_training)
training_spam <- glm(spam~., family=binomial, data=spamdata)
test_result <- predict(training_spam, spamdata[-training_ind,], type="response")
setwd("~/Library/Mobile Documents/com~apple~CloudDocs/UVA/20Spring_STAT6130/Final")
seoul <- read.csv("seoul.csv")
seoul$code <- factor(seoul$code)
seq <- seq(1, 647511, 4)
seoul4 <- seoul[seq,]
lm2 <- lm(cbind(date,code,latitude,longitude) ~ I(1/SO2)+I(1/NO2)+I(1/O3)+I(1/CO)+I(1/PM10)+I(1/PM2.5), data=seoul4)
## Fit Plot
fitted2 <- fitted(lm2)
studres2 <- studres(lm2)
plot(fitted2, studres2, xlab='Fitted Values', ylab='Studentized Residuals')
abline(h=0, lty=2)
## Multivariate Regression Model
lm2 <- lm(cbind(date,code,latitude,longitude) ~
I(exp(-SO2))+I(exp(-NO2))+I(exp(-O3))+I(exp(-CO))+I(exp(-PM10))+I(exp(-PM2.5)), data=seoul4)
## Fit Plot
fitted2 <- fitted(lm2)
studres2 <- studres(lm2)
## Fit Plot
library(MASS)
studres2 <- studres(lm2)
plot(fitted2, studres2, xlab='Fitted Values', ylab='Studentized Residuals')
abline(h=0, lty=2)
View(seoul4)
seq <- seq(1, 647511, 6)
seoul6 <- seoul[seq,]
seq <- seq(1, 647511, 8)
seoul8 <- seoul[seq,]
## Multivariate Regression Model
lm1 <- lm(cbind(date,code,latitude,longitude) ~ SO2+NO2+O3+CO+PM10+PM2.5, data=seoul8)
fitted <- fitted(lm1)
studres <- studres(lm1)
plot(fitted, studres, xlab='Fitted Values', ylab='Studentized Residuals')
abline(h=0, lty=2)
lm2 <- lm(cbind(date,code,latitude,longitude) ~
I(exp(-SO2))+I(exp(-NO2))+I(exp(-O3))+I(exp(-CO))+I(exp(-PM10))+I(exp(-PM2.5)), data=seoul8)
## Fit Plot
fitted2 <- fitted(lm2)
studres2 <- studres(lm2)
plot(fitted2, studres2, xlab='Fitted Values', ylab='Studentized Residuals')
abline(h=0, lty=2)
View(seoul8)
lm2 <- lm(cbind(date,code,latitude,longitude) ~
I(exp(-SO2))+I(exp(-NO2))+I(exp(-O3))+I(exp(-CO))+I(exp(-PM10))+I(exp(-PM2.5)), data=seoul8)
## Fit Plot
fitted2 <- fitted(lm2)
studres2 <- studres(lm2)
plot(fitted2, studres2, xlab='Fitted Values', ylab='Studentized Residuals')
abline(h=0, lty=2)
res2 <- residuals(lm2)
plot(fitted2, res2, xlab='Fitted Values', ylab='Residuals')
abline(h=0, lty=2)
## Multivariate Regression Model
lm3 <- lm(cbind(date,code,latitude,longitude) ~
I(2exp(-SO2))+I(2exp(-NO2))+I(2exp(-O3))+I(2exp(-CO))+I(2exp(-PM10))+I(2exp(-PM2.5)), data=seoul8)
## Multivariate Regression Model
lm3 <- lm(cbind(date,code,latitude,longitude) ~
I(2*exp(-SO2*))+I(2*exp(-NO2*))+I(2*exp(-O3))+I(2*exp(-CO))+I(2*exp(-PM10))+I(2*exp(-PM2.5)), data=seoul8)
## Multivariate Regression Model
lm3 <- lm(cbind(date,code,latitude,longitude) ~
I(2*exp(-SO2))+I(2*exp(-NO2))+I(2*exp(-O3))+I(2*exp(-CO))+I(2*exp(-PM10))+I(2*exp(-PM2.5)), data=seoul8)
## Fit Plot
fitted3 <- fitted(lm3)
studres3 <- studres(lm3)
plot(fitted3, studres3, xlab='Fitted Values', ylab='Studentized Residuals')
abline(h=0, lty=2)
x=0.004
1/x
exp(-x)
2*exp(-x)
1/x^2
lm2 <- lm(cbind(date,code,latitude,longitude) ~
I(exp(-SO2))+I(exp(-NO2))+I(exp(-O3))+I(exp(-CO))+PM10+PM2.5, data=seoul8)
## Fit Plot
fitted2 <- fitted(lm2)
studres2 <- studres(lm2)
plot(fitted2, studres2, xlab='Fitted Values', ylab='Studentized Residuals')
abline(h=0, lty=2)
lm3 <- lm(cbind(date,code,latitude,longitude) ~ I(1/SO2)+I(1/NO2)+I(1/O3)+I(1/CO)+PM10+PM2.5, data=seoul8)
## Fit Plot
fitted3 <- fitted(lm3)
studres3 <- studres(lm3)
plot(fitted3, studres3, xlab='Fitted Values', ylab='Studentized Residuals')
abline(h=0, lty=2)
lm3 <- lm(cbind(date,code,latitude,longitude) ~
I(2*exp(-SO2))+I(2*exp(-NO2))+I(2*exp(-O3))+I(2*exp(-CO))+PM10+PM2.5, data=seoul8)
## Fit Plot
fitted3 <- fitted(lm3)
studres3 <- studres(lm3)
plot(fitted3, studres3, xlab='Fitted Values', ylab='Studentized Residuals')
abline(h=0, lty=2)
## Multivariate Regression Model
lm3 <- lm(cbind(date,code,latitude,longitude) ~
I(SO2^(-1))+I(NO2^(-1))+I(O3^(-1))+I(CO^(-1))+PM10+PM2.5, data=seoul8)
table(is.na(seoul))
## Multivariate Regression Model
lm3 <- lm(cbind(date,code,latitude,longitude) ~
I(log(SO2))+I(log(NO2))+I(log(O3))+I(log(CO))+PM10+PM2.5, data=seoul8)
## Multivariate Regression Model
lm3 <- lm(cbind(date,code,latitude,longitude) ~
I(-log(SO2))+I(-log(NO2))+I(-log(O3))+I(-log(CO))+PM10+PM2.5, data=seoul8)
## Multivariate Regression Model
lm3 <- lm(cbind(date,code,latitude,longitude) ~
I(SO2^(1/2))+I(NO2^(1/2))+I(O3^(1/2))+I(CO^(1/2))+PM10+PM2.5, data=seoul8)
fitted3 <- fitted(lm3)
studres3 <- studres(lm3)
plot(fitted3, studres3, xlab='Fitted Values', ylab='Studentized Residuals')
abline(h=0, lty=2)
## Multivariate Regression Model
lm3 <- lm(cbind(date,code,latitude,longitude) ~
I(-SO2^(1/2))+I(-NO2^(1/2))+I(-O3^(1/2))+I(-CO^(1/2))+PM10+PM2.5, data=seoul8)
## Fit Plot
fitted3 <- fitted(lm3)
studres3 <- studres(lm3)
plot(fitted3, studres3, xlab='Fitted Values', ylab='Studentized Residuals')
abline(h=0, lty=2)
plot(fitted2, studres2, xlab='Fitted Values', ylab='Studentized Residuals')
abline(h=0, lty=2)
lm2 <- lm(cbind(date,code,latitude,longitude) ~
I(exp(-SO2))+I(exp(-NO2))+I(exp(-O3))+I(exp(-CO))+PM10+PM2.5, data=seoul8)
## Fit Plot
fitted2 <- fitted(lm2)
studres2 <- studres(lm2)
plot(fitted2, studres2, xlab='Fitted Values', ylab='Studentized Residuals')
abline(h=0, lty=2)
lm3 <- lm(cbind(date,code,latitude,longitude) ~
I(-SO2^(1/2))+I(-NO2^(1/2))+I(-O3^(1/2))+I(-CO^(1/2))+PM10+PM2.5, data=seoul8)
## Fit Plot
fitted3 <- fitted(lm3)
studres3 <- studres(lm3)
plot(fitted3, studres3, xlab='Fitted Values', ylab='Studentized Residuals')
abline(h=0, lty=2)
identify(fitted3, studres3, row.names(seoul))
lm2 <- lm(cbind(date,code,latitude,longitude) ~
I(exp(-SO2))+I(exp(-NO2))+I(exp(-O3))+I(exp(-CO))+PM10+PM2.5, data=seoul8)
## Fit Plot
fitted2 <- fitted(lm2)
studres2 <- studres(lm2)
plot(fitted2, studres2, xlab='Fitted Values', ylab='Studentized Residuals')
abline(h=0, lty=2)
lm2$coefficients
summary(lm2)
View(seoul8)
seoul$latitude <- factor(seoul$latitude)
seoul$longitude <- factor(seoul$longitude)
seoul8 <- seoul[seq,]
lm1 <- lm(cbind(date,code,latitude,longitude) ~ SO2+NO2+O3+CO+PM10+PM2.5, data=seoul8)
## Fit Plot
library(MASS)
fitted <- fitted(lm1)
studres <- studres(lm1)
plot(fitted, studres, xlab='Fitted Values', ylab='Studentized Residuals')
abline(h=0, lty=2)
plot(fitted, studres, xlab='Fitted Values', ylab='Studentized Residuals')
